<?php
/*
 *** DON'T EDIT THIS FILE! ***
 *
 * This file was automatically generated by the Lime parser generator.
 * The real source code you should be looking at is in one or more
 * grammar files in the Lime format.
 *
 * THE ONLY REASON TO LOOK AT THIS FILE is to see where in the grammar
 * file that your error happened, because there are enough comments to
 * help you debug your grammar.

 * If you ignore this warning, you're shooting yourself in the brain,
 * not the foot.
 */

namespace Javanile\Define;

class GrammarParser extends \Genesis\Lime\LimeParser {
  public $qi = 0;
  public $i = array(
    array(
      'loads_stmt' => 's 1',
      'define_stmt' => 's 16',
      'DEFINE' => 's 3',
      'start_stmt' => 's 17',
      "'start'" => "a 'start'"
    ),
    array(
      'define_stmt' => 's 2',
      'DEFINE' => 's 3',
      '#' => 'r 0'
    ),
    array(
      'DEFINE' => 'r 2',
      '#' => 'r 2'
    ),
    array(
      'concept' => 's 4',
      'LITERAL' => 's 10',
      'PATH' => 's 11'
    ),
    array(
      'WITH' => 's 5',
      'DEFINE' => 'r 3',
      '#' => 'r 3'
    ),
    array(
      'instruction_list' => 's 6',
      "'instruction_list'5" => 's 14',
      'LITERAL' => 'r 5',
      'PATH' => 'r 5'
    ),
    array(
      "','" => 's 7',
      'DEFINE' => 'r 4',
      '#' => 'r 4'
    ),
    array(
      'instruction' => 's 8',
      "'instruction'8" => 's 12',
      'LITERAL' => 'r 8',
      'PATH' => 'r 8'
    ),
    array(
      'concept' => 's 9',
      'LITERAL' => 's 10',
      'PATH' => 's 11',
      "','" => 'r 7',
      'DEFINE' => 'r 7',
      '#' => 'r 7'
    ),
    array(
      'LITERAL' => 'r 10',
      'PATH' => 'r 10',
      "','" => 'r 10',
      'DEFINE' => 'r 10',
      '#' => 'r 10'
    ),
    array(
      'WITH' => 'r 11',
      'DEFINE' => 'r 11',
      'LITERAL' => 'r 11',
      'PATH' => 'r 11',
      "','" => 'r 11',
      '#' => 'r 11'
    ),
    array(
      'WITH' => 'r 12',
      'DEFINE' => 'r 12',
      'LITERAL' => 'r 12',
      'PATH' => 'r 12',
      "','" => 'r 12',
      '#' => 'r 12'
    ),
    array(
      'concept' => 's 13',
      'LITERAL' => 's 10',
      'PATH' => 's 11'
    ),
    array(
      'LITERAL' => 'r 9',
      'PATH' => 'r 9',
      "','" => 'r 9',
      'DEFINE' => 'r 9',
      '#' => 'r 9'
    ),
    array(
      'instruction' => 's 15',
      "'instruction'8" => 's 12',
      'LITERAL' => 'r 8',
      'PATH' => 'r 8'
    ),
    array(
      'concept' => 's 9',
      'LITERAL' => 's 10',
      'PATH' => 's 11',
      "','" => 'r 6',
      'DEFINE' => 'r 6',
      '#' => 'r 6'
    ),
    array(
      'DEFINE' => 'r 1',
      '#' => 'r 1'
    ),
    array(
      '#' => 'r 13'
    )
  );
  public $d = array(

  );
  public $errors = array();
  function reduce_0_start_stmt_1($tokens, &$result) {
    // (0) start_stmt :=  loads_stmt
    $result = reset($tokens);
  }

  function reduce_1_loads_stmt_1($tokens, &$result) {
    // (1) loads_stmt :=  define_stmt
    $result = reset($tokens);
  }

  function reduce_2_loads_stmt_2($tokens, &$result) {
    // (2) loads_stmt :=  loads_stmt  define_stmt
    $result = reset($tokens);
  }

  function reduce_3_define_stmt_1($tokens, &$result) {
    // (3) define_stmt :=  DEFINE  concept
    $result = reset($tokens);
    $this->define($tokens[1]);
  }

  function reduce_4_define_stmt_2($tokens, &$result) {
    // (4) define_stmt :=  DEFINE  concept  WITH  instruction_list
    $result = reset($tokens);
    $this->define($tokens[1], $tokens[4]);
  }

  function reduce_5_instruction_list5_1($tokens, &$result) {
    // (5) 'instruction_list'5 :=  ε
    $result = reset($tokens);
    $result = [];
  }

  function reduce_6_instruction_list_1($tokens, &$result) {
    // (6) instruction_list :=  'instruction_list'5  instruction
    $result = reset($tokens);
    $result[] = $tokens[1];
  }

  function reduce_7_instruction_list_2($tokens, &$result) {
    // (7) instruction_list :=  instruction_list  ','  instruction
    $result = reset($tokens);
    $tokens[0][] = $tokens[2]; $result = $tokens[0];
  }

  function reduce_8_instruction8_1($tokens, &$result) {
    // (8) 'instruction'8 :=  ε
    $result = reset($tokens);
    $result = [];
  }

  function reduce_9_instruction_1($tokens, &$result) {
    // (9) instruction :=  'instruction'8  concept
    $result = reset($tokens);
    $result[] = $tokens[1];
  }

  function reduce_10_instruction_2($tokens, &$result) {
    // (10) instruction :=  instruction  concept
    $result = reset($tokens);
    $tokens[0][] = $tokens[1]; $result = $tokens[0];
  }

  function reduce_11_concept_1($tokens, &$result) {
    // (11) concept :=  LITERAL
    $result = reset($tokens);
  }

  function reduce_12_concept_2($tokens, &$result) {
    // (12) concept :=  PATH
    $result = reset($tokens);
  }

  function reduce_13_start_1($tokens, &$result) {
    // (13) 'start' :=  start_stmt
    $result = reset($tokens);
  }

  public $method = array(
    'reduce_0_start_stmt_1',
    'reduce_1_loads_stmt_1',
    'reduce_2_loads_stmt_2',
    'reduce_3_define_stmt_1',
    'reduce_4_define_stmt_2',
    'reduce_5_instruction_list5_1',
    'reduce_6_instruction_list_1',
    'reduce_7_instruction_list_2',
    'reduce_8_instruction8_1',
    'reduce_9_instruction_1',
    'reduce_10_instruction_2',
    'reduce_11_concept_1',
    'reduce_12_concept_2',
    'reduce_13_start_1'
  );
  public $a = array(
    array(
      'symbol' => 'start_stmt',
      'len' => 1,
      'replace' => true
    ),
    array(
      'symbol' => 'loads_stmt',
      'len' => 1,
      'replace' => true
    ),
    array(
      'symbol' => 'loads_stmt',
      'len' => 2,
      'replace' => true
    ),
    array(
      'symbol' => 'define_stmt',
      'len' => 2,
      'replace' => true
    ),
    array(
      'symbol' => 'define_stmt',
      'len' => 4,
      'replace' => true
    ),
    array(
      'symbol' => "'instruction_list'5",
      'len' => 0,
      'replace' => false
    ),
    array(
      'symbol' => 'instruction_list',
      'len' => 2,
      'replace' => true
    ),
    array(
      'symbol' => 'instruction_list',
      'len' => 3,
      'replace' => true
    ),
    array(
      'symbol' => "'instruction'8",
      'len' => 0,
      'replace' => false
    ),
    array(
      'symbol' => 'instruction',
      'len' => 2,
      'replace' => true
    ),
    array(
      'symbol' => 'instruction',
      'len' => 2,
      'replace' => true
    ),
    array(
      'symbol' => 'concept',
      'len' => 1,
      'replace' => true
    ),
    array(
      'symbol' => 'concept',
      'len' => 1,
      'replace' => true
    ),
    array(
      'symbol' => "'start'",
      'len' => 1,
      'replace' => true
    )
  );
}

// Time: 0.011181831359863 seconds
// Memory: 1422952 bytes
